/*
 * Copyright (C) 2019 Yasumasa Suenaga
 *
 * This file is part of ThreadDumper.
 *
 * UL Viewer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ThreadDumper is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ThreadDumper.  If not, see <http://www.gnu.org/licenses/>.
*/
package com.yasuenag.threaddumper.parser;

import java.time.LocalDateTime;
import java.util.LinkedList;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.OptionalLong;

/**
 *
 * @author yasuenag
 */
public class ThreadInfo {
    
    public static class LockInfo{

        private final String description;

        private final long address;

        private final String lockClass;

        public LockInfo(String description, long address, String lockClass){
            this.description = description;
            this.address = address;
            this.lockClass = lockClass;
        }

        public String getDescription(){
            return description;
        }

        public long getAddress(){
            return address;
        }

        public String getLockClass(){
            return lockClass;
        }

        /**
         * Generated by NetBeans
         * @return hasocode of this object.
         */
        @Override
        public int hashCode() {
            int hash = 7;
            hash = 67 * hash + Objects.hashCode(this.description);
            hash = 67 * hash + (int) (this.address ^ (this.address >>> 32));
            return hash;
        }

        @Override
        public boolean equals(Object obj) {
            
            if(obj instanceof LockInfo){
                return (((LockInfo)obj).address == address) && Objects.equals(((LockInfo)obj).description, description);
            }
            else{
                return false;
            }

        }

    }
    
    public static class CallFrame{
        
        private final StackTraceElement stackTraceElement;

        private Optional<LockInfo> lock;

        public CallFrame(String declaringClass, String moduleName, String moduleVersion, String methodName, String fileName, int lineNumber){
            stackTraceElement = new StackTraceElement(null, moduleName, moduleVersion, declaringClass, methodName, fileName, lineNumber);
            lock = Optional.empty();
        }

        public StackTraceElement getStackTraceElement(){
            return stackTraceElement;
        }

        public void setLock(LockInfo lock){
            this.lock = Optional.of(lock);
        }
        
        public Optional<LockInfo> getLock(){
            return lock;
        }

        /**
         * Generated by NetBeans
         * @return hasocode of this object.
         */
        @Override
        public int hashCode() {
            int hash = 7;
            hash = 61 * hash + Objects.hashCode(this.stackTraceElement);
            hash = 61 * hash + Objects.hashCode(this.lock);
            return hash;
        }

        @Override
        public boolean equals(Object obj) {
            
            if(obj instanceof CallFrame){
                return Objects.equals(((CallFrame)obj).stackTraceElement, stackTraceElement) && Objects.equals(((CallFrame)obj).lock, lock);
            }
            else{
                return false;
            }

        }
        
    }
    
    private final LocalDateTime time;

    private final String name;

    private OptionalInt id;

    private boolean daemon;

    private OptionalInt prio;

    private OptionalInt osPrio;

    private OptionalDouble cpu;

    private OptionalDouble elapsed;

    private OptionalLong allocated;

    private OptionalLong definedClasses;
    
    private final long tid;

    private final int nid;

    private final String state;

    private OptionalLong lastJavaSP;

    private Optional<Thread.State> threadState;

    private Optional<String> threadStateDescription;

    private LinkedList<CallFrame> callFrames;
    
    public ThreadInfo(LocalDateTime time, String name, long tid, int nid, String state){
        this.time = time;
        this.name = name;
        this.tid = tid;
        this.nid = nid;
        this.state = state;

        callFrames = new LinkedList<>();
        id = OptionalInt.empty();
        daemon = false;
        prio = OptionalInt.empty();
        osPrio = OptionalInt.empty();
        cpu = OptionalDouble.empty();
        elapsed = OptionalDouble.empty();
        allocated = OptionalLong.empty();
        definedClasses = OptionalLong.empty();
        lastJavaSP = OptionalLong.empty();
        threadState = Optional.empty();
        threadStateDescription = Optional.empty();
    }
  
    public LocalDateTime getTime(){
        return time;
    }

    public String getName(){
        return name;
    }

    public void setId(int id){
        this.id = OptionalInt.of(id);
    }

    public OptionalInt getId(){
        return id;
    }

    public void setDaemon(boolean daemon){
        this.daemon = daemon;
    }

    public boolean isDaemon(){
        return daemon;
    }
    
    public void setPrio(int prio){
        this.prio = OptionalInt.of(prio);
    }

    public OptionalInt getPrio(){
        return prio;
    }
    
    public void setOsPrio(int osPrio){
        this.osPrio = OptionalInt.of(osPrio);
    }

    public OptionalInt getOsPrio(){
        return osPrio;
    }
    
    public void setCpu(double cpu){
        this.cpu = OptionalDouble.of(cpu);
    }

    public OptionalDouble getCpu(){
        return cpu;
    }
    
    public void setElapsed(double elapsed){
        this.elapsed = OptionalDouble.of(elapsed);
    }

    public OptionalDouble getElapsed(){
        return elapsed;
    }

    public void setAllocated(long allocated){
        this.allocated = OptionalLong.of(allocated);
    }

    public OptionalLong getAllocated(){
        return allocated;
    }

    public void setDefinedClasses(long definedClasses){
        this.definedClasses = OptionalLong.of(definedClasses);
    }

    public OptionalLong getDefinedClasses(){
        return definedClasses;
    }

    public long getTid(){
        return tid;
    }

    public int getNid(){
        return nid;
    }
    
    public String getState(){
        return state;
    }

    public void setLastJavaSP(long lastJavaSP){
        this.lastJavaSP = OptionalLong.of(lastJavaSP);
    }

    public OptionalLong getLastJavaSP(){
        return lastJavaSP;
    }

    public void setThreadState(Thread.State threadState){
        this.threadState = Optional.of(threadState);
    }

    public Optional<Thread.State> getThreadState(){
        return threadState;
    }
    
    public void setThreadStateDescription(String threadStateDescription){
        this.threadStateDescription = Optional.of(threadStateDescription);
    }

    public Optional<String> getThreadStateDescription(){
        return threadStateDescription;
  }

    public LinkedList<CallFrame> getCallFrames(){
        return callFrames;
    }

    public void setCallFrames(LinkedList<CallFrame> callFrames){
        this.callFrames = callFrames;
    }

    @Override
    public String toString() {
        return name + " (nid = " + nid + ")";
    }
    
}
